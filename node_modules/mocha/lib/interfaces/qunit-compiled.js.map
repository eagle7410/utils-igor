{"version":3,"sources":["qunit.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,OAAO,QAAQ,SAAR,CAAX;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAgB;AAC/B,MAAI,SAAS,CAAC,KAAD,CAAb;;AAEA,QAAM,EAAN,CAAS,aAAT,EAAwB,UAAS,OAAT,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AACrD,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,KAArC,CAAb;;AAEA,YAAQ,MAAR,GAAiB,OAAO,MAAxB;AACA,YAAQ,KAAR,GAAgB,OAAO,KAAvB;AACA,YAAQ,UAAR,GAAqB,OAAO,UAA5B;AACA,YAAQ,SAAR,GAAoB,OAAO,SAA3B;AACA,YAAQ,GAAR,GAAc,MAAM,OAAN,CAAc,KAAd,IAAuB,OAAO,YAAP,CAAoB,KAApB,CAArC;AACA;;;;AAIA,YAAQ,KAAR,GAAgB,UAAS,KAAT,EAAgB;AAC9B,UAAI,OAAO,MAAP,GAAgB,CAApB,EAAuB;AACrB,eAAO,KAAP;AACD;AACD,aAAO,OAAO,KAAP,CAAa,MAAb,CAAoB;AACzB,eAAO,KADkB;AAEzB,cAAM,IAFmB;AAGzB,YAAI;AAHqB,OAApB,CAAP;AAKD,KATD;;AAWA;;;;AAIA,YAAQ,KAAR,CAAc,IAAd,GAAqB,UAAS,KAAT,EAAgB;AACnC,UAAI,OAAO,MAAP,GAAgB,CAApB,EAAuB;AACrB,eAAO,KAAP;AACD;AACD,aAAO,OAAO,KAAP,CAAa,IAAb,CAAkB;AACvB,eAAO,KADgB;AAEvB,cAAM,IAFiB;AAGvB,YAAI;AAHmB,OAAlB,CAAP;AAKD,KATD;;AAWA;;;;;;AAMA,YAAQ,IAAR,GAAe,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACjC,UAAI,OAAO,IAAI,IAAJ,CAAS,KAAT,EAAgB,EAAhB,CAAX;AACA,WAAK,IAAL,GAAY,IAAZ;AACA,aAAO,CAAP,EAAU,OAAV,CAAkB,IAAlB;AACA,aAAO,IAAP;AACD,KALD;;AAOA;;;;AAIA,YAAQ,IAAR,CAAa,IAAb,GAAoB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACtC,aAAO,OAAO,IAAP,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,QAAQ,IAAR,CAAa,KAAb,EAAoB,EAApB,CAAxB,CAAP;AACD,KAFD;;AAIA,YAAQ,IAAR,CAAa,IAAb,GAAoB,OAAO,IAAP,CAAY,IAAhC;AACA,YAAQ,IAAR,CAAa,OAAb,GAAuB,OAAO,IAAP,CAAY,OAAnC;AACD,GA7DD;AA8DD,CAjED","file":"qunit-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Test = require('../test');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Exclusive Suite.\n     */\n\n    context.suite.only = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: false\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      return common.test.only(mocha, context.test(title, fn));\n    };\n\n    context.test.skip = common.test.skip;\n    context.test.retries = common.test.retries;\n  });\n};\n"]}