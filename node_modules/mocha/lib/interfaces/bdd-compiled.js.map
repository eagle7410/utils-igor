{"version":3,"sources":["bdd.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,OAAO,QAAQ,SAAR,CAAX;;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAO,OAAP,GAAiB,UAAS,KAAT,EAAgB;AAC/B,MAAI,SAAS,CAAC,KAAD,CAAb;;AAEA,QAAM,EAAN,CAAS,aAAT,EAAwB,UAAS,OAAT,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B;AACrD,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,EAA4B,OAA5B,EAAqC,KAArC,CAAb;;AAEA,YAAQ,MAAR,GAAiB,OAAO,MAAxB;AACA,YAAQ,KAAR,GAAgB,OAAO,KAAvB;AACA,YAAQ,UAAR,GAAqB,OAAO,UAA5B;AACA,YAAQ,SAAR,GAAoB,OAAO,SAA3B;AACA,YAAQ,GAAR,GAAc,MAAM,OAAN,CAAc,KAAd,IAAuB,OAAO,YAAP,CAAoB,KAApB,CAArC;AACA;;;;;;AAMA,YAAQ,QAAR,GAAmB,QAAQ,OAAR,GAAkB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACvD,aAAO,OAAO,KAAP,CAAa,MAAb,CAAoB;AACzB,eAAO,KADkB;AAEzB,cAAM,IAFmB;AAGzB,YAAI;AAHqB,OAApB,CAAP;AAKD,KAND;;AAQA;;;;AAIA,YAAQ,SAAR,GAAoB,QAAQ,QAAR,GAAmB,QAAQ,QAAR,CAAiB,IAAjB,GAAwB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACjF,aAAO,OAAO,KAAP,CAAa,IAAb,CAAkB;AACvB,eAAO,KADgB;AAEvB,cAAM,IAFiB;AAGvB,YAAI;AAHmB,OAAlB,CAAP;AAKD,KAND;;AAQA;;;;AAIA,YAAQ,QAAR,CAAiB,IAAjB,GAAwB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AAC1C,aAAO,OAAO,KAAP,CAAa,IAAb,CAAkB;AACvB,eAAO,KADgB;AAEvB,cAAM,IAFiB;AAGvB,YAAI;AAHmB,OAAlB,CAAP;AAKD,KAND;;AAQA;;;;;;AAMA,YAAQ,EAAR,GAAa,QAAQ,OAAR,GAAkB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACjD,UAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,UAAI,MAAM,SAAN,EAAJ,EAAuB;AACrB,aAAK,IAAL;AACD;AACD,UAAI,OAAO,IAAI,IAAJ,CAAS,KAAT,EAAgB,EAAhB,CAAX;AACA,WAAK,IAAL,GAAY,IAAZ;AACA,YAAM,OAAN,CAAc,IAAd;AACA,aAAO,IAAP;AACD,KATD;;AAWA;;;;AAIA,YAAQ,EAAR,CAAW,IAAX,GAAkB,UAAS,KAAT,EAAgB,EAAhB,EAAoB;AACpC,aAAO,OAAO,IAAP,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,QAAQ,EAAR,CAAW,KAAX,EAAkB,EAAlB,CAAxB,CAAP;AACD,KAFD;;AAIA;;;;AAIA,YAAQ,GAAR,GAAc,QAAQ,QAAR,GAAmB,QAAQ,EAAR,CAAW,IAAX,GAAkB,UAAS,KAAT,EAAgB;AACjE,cAAQ,EAAR,CAAW,KAAX;AACD,KAFD;;AAIA;;;AAGA,YAAQ,EAAR,CAAW,OAAX,GAAqB,UAAS,CAAT,EAAY;AAC/B,cAAQ,OAAR,CAAgB,CAAhB;AACD,KAFD;AAGD,GArFD;AAsFD,CAzFD","file":"bdd-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Test = require('../test');\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context, mocha);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn) {\n      return common.suite.create({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe = context.xcontext = context.describe.skip = function(title, fn) {\n      return common.suite.skip({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn) {\n      return common.suite.only({\n        title: title,\n        file: file,\n        fn: fn\n      });\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn) {\n      var suite = suites[0];\n      if (suite.isPending()) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn) {\n      return common.test.only(mocha, context.it(title, fn));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit = context.xspecify = context.it.skip = function(title) {\n      context.it(title);\n    };\n\n    /**\n     * Number of attempts to retry.\n     */\n    context.it.retries = function(n) {\n      context.retries(n);\n    };\n  });\n};\n"]}