{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,WAAW,QAAQ,YAAR,CAAf;AACA,IAAI,SAAS,QAAQ,eAAR,CAAb;AACA,IAAI,WAAW,QAAQ,SAAR,EAAmB,QAAlC;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,IAAjB;;AAEA;;;;;;;AAOA,SAAS,IAAT,CAAc,KAAd,EAAqB,EAArB,EAAyB;AACvB,MAAI,CAAC,SAAS,KAAT,CAAL,EAAsB;AACpB,UAAM,IAAI,KAAJ,CAAU,4CAA4C,OAAO,KAAnD,GAA2D,sBAArE,CAAN;AACD;AACD,WAAS,IAAT,CAAc,IAAd,EAAoB,KAApB,EAA2B,EAA3B;AACA,OAAK,OAAL,GAAe,CAAC,EAAhB;AACA,OAAK,IAAL,GAAY,MAAZ;AACD;;AAED;;;AAGA,KAAK,SAAL,GAAiB,OAAO,SAAS,SAAhB,EAA2B;AAC1C,eAAa;AAD6B,CAA3B,CAAjB;;AAIA,KAAK,SAAL,CAAe,KAAf,GAAuB,YAAW;AAChC,MAAI,OAAO,IAAI,IAAJ,CAAS,KAAK,KAAd,EAAqB,KAAK,EAA1B,CAAX;AACA,OAAK,OAAL,CAAa,KAAK,OAAL,EAAb;AACA,OAAK,IAAL,CAAU,KAAK,IAAL,EAAV;AACA,OAAK,cAAL,CAAoB,KAAK,cAAL,EAApB;AACA,OAAK,OAAL,CAAa,KAAK,OAAL,EAAb;AACA,OAAK,YAAL,CAAkB,KAAK,YAAL,EAAlB;AACA,OAAK,OAAL,CAAa,KAAK,OAAL,EAAb;AACA,OAAK,MAAL,GAAc,KAAK,MAAnB;AACA,OAAK,IAAL,GAAY,KAAK,IAAjB;AACA,OAAK,GAAL,GAAW,KAAK,GAAhB;AACA,SAAO,IAAP;AACD,CAZD","file":"test-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar create = require('lodash.create');\nvar isString = require('./utils').isString;\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @api private\n * @param {String} title\n * @param {Function} fn\n */\nfunction Test(title, fn) {\n  if (!isString(title)) {\n    throw new Error('Test `title` should be a \"string\" but \"' + typeof title + '\" was given instead.');\n  }\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\nTest.prototype = create(Runnable.prototype, {\n  constructor: Test\n});\n\nTest.prototype.clone = function() {\n  var test = new Test(this.title, this.fn);\n  test.timeout(this.timeout());\n  test.slow(this.slow());\n  test.enableTimeouts(this.enableTimeouts());\n  test.retries(this.retries());\n  test.currentRetry(this.currentRetry());\n  test.globals(this.globals());\n  test.parent = this.parent;\n  test.file = this.file;\n  test.ctx = this.ctx;\n  return test;\n};\n"]}