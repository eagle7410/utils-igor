{"version":3,"sources":["task.js"],"names":[],"mappings":"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","file":"task-compiled.js","sourcesContent":["(function(exports) {\n\n  'use strict';\n\n  var grunt = require('../grunt');\n\n  // Construct-o-rama.\n  function Task() {\n    // Information about the currently-running task.\n    this.current = {};\n    // Tasks.\n    this._tasks = {};\n    // Task queue.\n    this._queue = [];\n    // Queue placeholder (for dealing with nested tasks).\n    this._placeholder = {placeholder: true};\n    // Queue marker (for clearing the queue programmatically).\n    this._marker = {marker: true};\n    // Options.\n    this._options = {};\n    // Is the queue running?\n    this._running = false;\n    // Success status of completed tasks.\n    this._success = {};\n  }\n\n  // Expose the constructor function.\n  exports.Task = Task;\n\n  // Create a new Task instance.\n  exports.create = function() {\n    return new Task();\n  };\n\n  // If the task runner is running or an error handler is not defined, throw\n  // an exception. Otherwise, call the error handler directly.\n  Task.prototype._throwIfRunning = function(obj) {\n    if (this._running || !this._options.error) {\n      // Throw an exception that the task runner will catch.\n      throw obj;\n    } else {\n      // Not inside the task runner. Call the error handler and abort.\n      this._options.error.call({name: null}, obj);\n    }\n  };\n\n  // Register a new task.\n  Task.prototype.registerTask = function(name, info, fn) {\n    // If optional \"info\" string is omitted, shuffle arguments a bit.\n    if (fn == null) {\n      fn = info;\n      info = null;\n    }\n    // String or array of strings was passed instead of fn.\n    var tasks;\n    if (typeof fn !== 'function') {\n      // Array of task names.\n      tasks = this.parseArgs([fn]);\n      // This task function just runs the specified tasks.\n      fn = this.run.bind(this, fn);\n      fn.alias = true;\n      // Generate an info string if one wasn't explicitly passed.\n      if (!info) {\n        info = 'Alias for \"' + tasks.join('\", \"') + '\" task' +\n          (tasks.length === 1 ? '' : 's') + '.';\n      }\n    } else if (!info) {\n      info = 'Custom task.';\n    }\n    // Add task into cache.\n    this._tasks[name] = {name: name, info: info, fn: fn};\n    // Make chainable!\n    return this;\n  };\n\n  // Is the specified task an alias?\n  Task.prototype.isTaskAlias = function(name) {\n    return !!this._tasks[name].fn.alias;\n  };\n\n  // Has the specified task been registered?\n  Task.prototype.exists = function(name) {\n    return name in this._tasks;\n  };\n\n  // Rename a task. This might be useful if you want to override the default\n  // behavior of a task, while retaining the old name. This is a billion times\n  // easier to implement than some kind of in-task \"super\" functionality.\n  Task.prototype.renameTask = function(oldname, newname) {\n    if (!this._tasks[oldname]) {\n      throw new Error('Cannot rename missing \"' + oldname + '\" task.');\n    }\n    // Rename task.\n    this._tasks[newname] = this._tasks[oldname];\n    // Update name property of task.\n    this._tasks[newname].name = newname;\n    // Remove old name.\n    delete this._tasks[oldname];\n    // Make chainable!\n    return this;\n  };\n\n  // Argument parsing helper. Supports these signatures:\n  //  fn('foo')                 // ['foo']\n  //  fn('foo', 'bar', 'baz')   // ['foo', 'bar', 'baz']\n  //  fn(['foo', 'bar', 'baz']) // ['foo', 'bar', 'baz']\n  Task.prototype.parseArgs = function(args) {\n    // Return the first argument if it's an array, otherwise return an array\n    // of all arguments.\n    return Array.isArray(args[0]) ? args[0] : [].slice.call(args);\n  };\n\n  // Split a colon-delimited string into an array, unescaping (but not\n  // splitting on) any \\: escaped colons.\n  Task.prototype.splitArgs = function(str) {\n    if (!str) { return []; }\n    // Store placeholder for \\\\ followed by \\:\n    str = str.replace(/\\\\\\\\/g, '\\uFFFF').replace(/\\\\:/g, '\\uFFFE');\n    // Split on :\n    return str.split(':').map(function(s) {\n      // Restore place-held : followed by \\\\\n      return s.replace(/\\uFFFE/g, ':').replace(/\\uFFFF/g, '\\\\');\n    });\n  };\n\n  // Given a task name, determine which actual task will be called, and what\n  // arguments will be passed into the task callback. \"foo\" -> task \"foo\", no\n  // args. \"foo:bar:baz\" -> task \"foo:bar:baz\" with no args (if \"foo:bar:baz\"\n  // task exists), otherwise task \"foo:bar\" with arg \"baz\" (if \"foo:bar\" task\n  // exists), otherwise task \"foo\" with args \"bar\" and \"baz\".\n  Task.prototype._taskPlusArgs = function(name) {\n    // Get task name / argument parts.\n    var parts = this.splitArgs(name);\n    // Start from the end, not the beginning!\n    var i = parts.length;\n    var task;\n    do {\n      // Get a task.\n      task = this._tasks[parts.slice(0, i).join(':')];\n      // If the task doesn't exist, decrement `i`, and if `i` is greater than\n      // 0, repeat.\n    } while (!task && --i > 0);\n    // Just the args.\n    var args = parts.slice(i);\n    // Maybe you want to use them as flags instead of as positional args?\n    var flags = {};\n    args.forEach(function(arg) { flags[arg] = true; });\n    // The task to run and the args to run it with.\n    return {task: task, nameArgs: name, args: args, flags: flags};\n  };\n\n  // Append things to queue in the correct spot.\n  Task.prototype._push = function(things) {\n    // Get current placeholder index.\n    var index = this._queue.indexOf(this._placeholder);\n    if (index === -1) {\n      // No placeholder, add task+args objects to end of queue.\n      this._queue = this._queue.concat(things);\n    } else {\n      // Placeholder exists, add task+args objects just before placeholder.\n      [].splice.apply(this._queue, [index, 0].concat(things));\n    }\n  };\n\n  // Enqueue a task.\n  Task.prototype.run = function() {\n    // Parse arguments into an array, returning an array of task+args objects.\n    var things = this.parseArgs(arguments).map(this._taskPlusArgs, this);\n    // Throw an exception if any tasks weren't found.\n    var fails = things.filter(function(thing) { return !thing.task; });\n    if (fails.length > 0) {\n      this._throwIfRunning(new Error('Task \"' + fails[0].nameArgs + '\" not found.'));\n      return this;\n    }\n    // Append things to queue in the correct spot.\n    this._push(things);\n    // Make chainable!\n    return this;\n  };\n\n  // Add a marker to the queue to facilitate clearing it programmatically.\n  Task.prototype.mark = function() {\n    this._push(this._marker);\n    // Make chainable!\n    return this;\n  };\n\n  // Run a task function, handling this.async / return value.\n  Task.prototype.runTaskFn = function(context, fn, done, asyncDone) {\n    // Async flag.\n    var async = false;\n\n    // Update the internal status object and run the next task.\n    var complete = function(success) {\n      var err = null;\n      if (success === false) {\n        // Since false was passed, the task failed generically.\n        err = new Error('Task \"' + context.nameArgs + '\" failed.');\n      } else if (success instanceof Error || {}.toString.call(success) === '[object Error]') {\n        // An error object was passed, so the task failed specifically.\n        err = success;\n        success = false;\n      } else {\n        // The task succeeded.\n        success = true;\n      }\n      // The task has ended, reset the current task object.\n      this.current = {};\n      // A task has \"failed\" only if it returns false (async) or if the\n      // function returned by .async is passed false.\n      this._success[context.nameArgs] = success;\n      // If task failed, call error handler.\n      if (!success && this._options.error) {\n        this._options.error.call({name: context.name, nameArgs: context.nameArgs}, err);\n      }\n      // only call done async if explicitly requested to\n      // see: https://github.com/gruntjs/grunt/pull/1026\n      if (asyncDone) {\n        process.nextTick(function() {\n          done(err, success);\n        });\n      } else {\n        done(err, success);\n      }\n    }.bind(this);\n\n    // When called, sets the async flag and returns a function that can\n    // be used to continue processing the queue.\n    context.async = function() {\n      async = true;\n      // The returned function should execute asynchronously in case\n      // someone tries to do this.async()(); inside a task (WTF).\n      return grunt.util._.once(function(success) {\n        setTimeout(function() { complete(success); }, 1);\n      });\n    };\n\n    // Expose some information about the currently-running task.\n    this.current = context;\n\n    try {\n      // Get the current task and run it, setting `this` inside the task\n      // function to be something useful.\n      var success = fn.call(context);\n      // If the async flag wasn't set, process the next task in the queue.\n      if (!async) {\n        complete(success);\n      }\n    } catch (err) {\n      complete(err);\n    }\n  };\n\n  // Begin task queue processing. Ie. run all tasks.\n  Task.prototype.start = function(opts) {\n    if (!opts) {\n      opts = {};\n    }\n    // Abort if already running.\n    if (this._running) { return false; }\n    // Actually process the next task.\n    var nextTask = function() {\n      // Get next task+args object from queue.\n      var thing;\n      // Skip any placeholders or markers.\n      do {\n        thing = this._queue.shift();\n      } while (thing === this._placeholder || thing === this._marker);\n      // If queue was empty, we're all done.\n      if (!thing) {\n        this._running = false;\n        if (this._options.done) {\n          this._options.done();\n        }\n        return;\n      }\n      // Add a placeholder to the front of the queue.\n      this._queue.unshift(this._placeholder);\n\n      // Expose some information about the currently-running task.\n      var context = {\n        // The current task name plus args, as-passed.\n        nameArgs: thing.nameArgs,\n        // The current task name.\n        name: thing.task.name,\n        // The current task arguments.\n        args: thing.args,\n        // The current arguments, available as named flags.\n        flags: thing.flags\n      };\n\n      // Actually run the task function (handling this.async, etc)\n      this.runTaskFn(context, function() {\n        return thing.task.fn.apply(this, this.args);\n      }, nextTask, !!opts.asyncDone);\n\n    }.bind(this);\n\n    // Update flag.\n    this._running = true;\n    // Process the next task.\n    nextTask();\n  };\n\n  // Clear remaining tasks from the queue.\n  Task.prototype.clearQueue = function(options) {\n    if (!options) { options = {}; }\n    if (options.untilMarker) {\n      this._queue.splice(0, this._queue.indexOf(this._marker) + 1);\n    } else {\n      this._queue = [];\n    }\n    // Make chainable!\n    return this;\n  };\n\n  // Test to see if all of the given tasks have succeeded.\n  Task.prototype.requires = function() {\n    this.parseArgs(arguments).forEach(function(name) {\n      var success = this._success[name];\n      if (!success) {\n        throw new Error('Required task \"' + name +\n          '\" ' + (success === false ? 'failed' : 'must be run first') + '.');\n      }\n    }.bind(this));\n  };\n\n  // Override default options.\n  Task.prototype.options = function(options) {\n    Object.keys(options).forEach(function(name) {\n      this._options[name] = options[name];\n    }.bind(this));\n  };\n\n}(typeof exports === 'object' && exports || this));\n"]}