{"version":3,"sources":["grunt.js"],"names":[],"mappings":"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","file":"grunt-compiled.js","sourcesContent":["'use strict';\n\n// Nodejs libs.\nvar path = require('path');\n\n// This allows grunt to require() .coffee files.\nrequire('coffee-script/register');\n\n// The module to be exported.\nvar grunt = module.exports = {};\n\n// Expose internal grunt libs.\nfunction gRequire(name) {\n  return grunt[name] = require('./grunt/' + name);\n}\n\nvar util = require('grunt-legacy-util');\ngrunt.util = util;\ngrunt.util.task = require('./util/task');\n\nvar Log = require('grunt-legacy-log').Log;\nvar log = new Log({grunt: grunt});\ngrunt.log = log;\n\ngRequire('template');\ngRequire('event');\nvar fail = gRequire('fail');\ngRequire('file');\nvar option = gRequire('option');\nvar config = gRequire('config');\nvar task = gRequire('task');\nvar help = gRequire('help');\ngRequire('cli');\nvar verbose = grunt.verbose = log.verbose;\n\n// Expose some grunt metadata.\ngrunt.package = require('../package.json');\ngrunt.version = grunt.package.version;\n\n// Expose specific grunt lib methods on grunt.\nfunction gExpose(obj, methodName, newMethodName) {\n  grunt[newMethodName || methodName] = obj[methodName].bind(obj);\n}\ngExpose(task, 'registerTask');\ngExpose(task, 'registerMultiTask');\ngExpose(task, 'registerInitTask');\ngExpose(task, 'renameTask');\ngExpose(task, 'loadTasks');\ngExpose(task, 'loadNpmTasks');\ngExpose(config, 'init', 'initConfig');\ngExpose(fail, 'warn');\ngExpose(fail, 'fatal');\n\n// Expose the task interface. I've never called this manually, and have no idea\n// how it will work. But it might.\ngrunt.tasks = function(tasks, options, done) {\n  // Update options with passed-in options.\n  option.init(options);\n\n  // Display the grunt version and quit if the user did --version.\n  var _tasks, _options;\n  if (option('version')) {\n    // Not --verbose.\n    log.writeln('grunt v' + grunt.version);\n\n    if (option('verbose')) {\n      // --verbose\n      verbose.writeln('Install path: ' + path.resolve(__dirname, '..'));\n      // Yes, this is a total hack, but we don't want to log all that verbose\n      // task initialization stuff here.\n      grunt.log.muted = true;\n      // Initialize task system so that available tasks can be listed.\n      grunt.task.init([], {help: true});\n      // Re-enable logging.\n      grunt.log.muted = false;\n\n      // Display available tasks (for shell completion, etc).\n      _tasks = Object.keys(grunt.task._tasks).sort();\n      verbose.writeln('Available tasks: ' + _tasks.join(' '));\n\n      // Display available options (for shell completion, etc).\n      _options = [];\n      Object.keys(grunt.cli.optlist).forEach(function(long) {\n        var o = grunt.cli.optlist[long];\n        _options.push('--' + (o.negate ? 'no-' : '') + long);\n        if (o.short) { _options.push('-' + o.short); }\n      });\n      verbose.writeln('Available options: ' + _options.join(' '));\n    }\n\n    return;\n  }\n\n  // Init colors.\n  log.initColors();\n\n  // Display help and quit if the user did --help.\n  if (option('help')) {\n    help.display();\n    return;\n  }\n\n  // A little header stuff.\n  verbose.header('Initializing').writeflags(option.flags(), 'Command-line options');\n\n  // Determine and output which tasks will be run.\n  var tasksSpecified = tasks && tasks.length > 0;\n  tasks = task.parseArgs([tasksSpecified ? tasks : 'default']);\n\n  // Initialize tasks.\n  task.init(tasks, options);\n\n  verbose.writeln();\n  if (!tasksSpecified) {\n    verbose.writeln('No tasks specified, running default tasks.');\n  }\n  verbose.writeflags(tasks, 'Running tasks');\n\n  // Handle otherwise unhandleable (probably asynchronous) exceptions.\n  var uncaughtHandler = function(e) {\n    fail.fatal(e, fail.code.TASK_FAILURE);\n  };\n  process.on('uncaughtException', uncaughtHandler);\n\n  // Report, etc when all tasks have completed.\n  task.options({\n    error: function(e) {\n      fail.warn(e, fail.code.TASK_FAILURE);\n    },\n    done: function() {\n      // Stop handling uncaught exceptions so that we don't leave any\n      // unwanted process-level side effects behind. There is no need to do\n      // this in the error callback, because fail.warn() will either kill\n      // the process, or with --force keep on going all the way here.\n      process.removeListener('uncaughtException', uncaughtHandler);\n\n      // Output a final fail / success report.\n      fail.report();\n\n      if (done) {\n        // Execute \"done\" function when done (only if passed, of course).\n        done();\n      } else {\n        // Otherwise, explicitly exit.\n        util.exit(0);\n      }\n    }\n  });\n\n  // Execute all tasks, in order. Passing each task individually in a forEach\n  // allows the error callback to execute multiple times.\n  tasks.forEach(function(name) { task.run(name); });\n  // Run tasks async internally to reduce call-stack, per:\n  // https://github.com/gruntjs/grunt/pull/1026\n  task.start({asyncDone: true});\n};\n"]}