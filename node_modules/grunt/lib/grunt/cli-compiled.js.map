{"version":3,"sources":["cli.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;;AAEA;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,eAAe,QAAQ,qBAAR,CAAnB;;AAEA;AACA,IAAI,MAAM,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB,IAAlB,EAAwB;AACjD;AACA,MAAI,OAAJ,EAAa;AACX;AACA,WAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAS,GAAT,EAAc;AACzC,UAAI,EAAE,OAAO,IAAI,OAAb,CAAJ,EAA2B;AACzB;AACA,YAAI,OAAJ,CAAY,GAAZ,IAAmB,QAAQ,GAAR,CAAnB;AACD,OAHD,MAGO,IAAI,IAAI,OAAJ,CAAY,GAAZ,EAAiB,IAAjB,KAA0B,KAA9B,EAAqC;AAC1C;AACA;AACA,WAAG,IAAH,CAAQ,KAAR,CAAc,IAAI,OAAJ,CAAY,GAAZ,CAAd,EAAgC,QAAQ,GAAR,CAAhC;AACD;AACF,KATD;AAUD;;AAED;AACA,QAAM,KAAN,CAAY,IAAI,KAAhB,EAAuB,IAAI,OAA3B,EAAoC,IAApC;AACD,CAlBD;;AAoBA;AACA,IAAI,UAAU,IAAI,OAAJ,GAAc,YAA5B;;AAEA;AACA,IAAI,UAAU,EAAd;AACA,IAAI,QAAQ,EAAZ;;AAEA,OAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAS,GAAT,EAAc;AACzC,MAAI,QAAQ,QAAQ,GAAR,EAAa,KAAzB;AACA,MAAI,KAAJ,EAAW;AACT,YAAQ,KAAR,IAAiB,OAAO,GAAxB;AACD;AACD,QAAM,GAAN,IAAa,QAAQ,GAAR,EAAa,IAA1B;AACD,CAND;;AAQA,IAAI,SAAS,KAAK,KAAL,EAAY,OAAZ,EAAqB,QAAQ,IAA7B,EAAmC,CAAnC,CAAb;AACA,IAAI,KAAJ,GAAY,OAAO,IAAP,CAAY,MAAxB;AACA,IAAI,OAAJ,GAAc,MAAd;AACA,OAAO,OAAO,IAAd;;AAEA;AACA,OAAO,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAS,GAAT,EAAc;AACzC,MAAI,QAAQ,GAAR,EAAa,IAAb,KAAsB,KAAtB,IAA+B,EAAE,OAAO,IAAI,OAAb,CAAnC,EAA0D;AACxD,QAAI,OAAJ,CAAY,GAAZ,IAAmB,EAAnB;AACD;AACF,CAJD","file":"cli-compiled.js","sourcesContent":["'use strict';\n\nvar grunt = require('../grunt');\n\n// External libs.\nvar nopt = require('nopt');\nvar gruntOptions = require('grunt-known-options');\n\n// This is only executed when run via command line.\nvar cli = module.exports = function(options, done) {\n  // CLI-parsed options override any passed-in \"default\" options.\n  if (options) {\n    // For each default option...\n    Object.keys(options).forEach(function(key) {\n      if (!(key in cli.options)) {\n        // If this option doesn't exist in the parsed cli.options, add it in.\n        cli.options[key] = options[key];\n      } else if (cli.optlist[key].type === Array) {\n        // If this option's type is Array, append it to any existing array\n        // (or create a new array).\n        [].push.apply(cli.options[key], options[key]);\n      }\n    });\n  }\n\n  // Run tasks.\n  grunt.tasks(cli.tasks, cli.options, done);\n};\n\n// Default options.\nvar optlist = cli.optlist = gruntOptions;\n\n// Parse `optlist` into a form that nopt can handle.\nvar aliases = {};\nvar known = {};\n\nObject.keys(optlist).forEach(function(key) {\n  var short = optlist[key].short;\n  if (short) {\n    aliases[short] = '--' + key;\n  }\n  known[key] = optlist[key].type;\n});\n\nvar parsed = nopt(known, aliases, process.argv, 2);\ncli.tasks = parsed.argv.remain;\ncli.options = parsed;\ndelete parsed.argv;\n\n// Initialize any Array options that weren't initialized.\nObject.keys(optlist).forEach(function(key) {\n  if (optlist[key].type === Array && !(key in cli.options)) {\n    cli.options[key] = [];\n  }\n});\n"]}