{"version":3,"sources":["template.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;;AAEA;AACA,IAAI,WAAW,OAAO,OAAP,GAAiB,EAAhC;;AAEA;AACA,SAAS,IAAT,GAAgB,QAAQ,YAAR,CAAhB;;AAEA;AACA,SAAS,KAAT,GAAiB,UAAS,MAAT,EAAiB;AAChC,SAAO,SAAS,IAAT,CAAc,IAAI,IAAJ,EAAd,EAA0B,MAA1B,CAAP;AACD,CAFD;;AAIA;AACA,IAAI,gBAAgB,EAApB;;AAEA;AACA,SAAS,aAAT,GAAyB,UAAS,IAAT,EAAe,MAAf,EAAuB,MAAvB,EAA+B;AACtD,MAAI,aAAa,cAAc,IAAd,IAAsB,EAAvC;AACA;AACA,aAAW,MAAX,GAAoB,MAApB;AACA,aAAW,MAAX,GAAoB,MAApB;AACA;AACA,MAAI,IAAI,WAAW,MAAX,CAAkB,OAAlB,CAA0B,MAA1B,EAAkC,MAAlC,CAAR;AACA,MAAI,IAAI,iBAAiB,WAAW,MAAX,CAAkB,OAAlB,CAA0B,MAA1B,EAAkC,MAAlC,CAAzB;AACA;AACA,aAAW,MAAX,GAAoB;AAClB,cAAU,IAAI,MAAJ,CAAW,IAAI,CAAf,EAAkB,GAAlB,CADQ;AAElB,iBAAa,IAAI,MAAJ,CAAW,IAAI,GAAJ,GAAU,CAArB,EAAwB,GAAxB,CAFK;AAGlB,YAAQ,IAAI,MAAJ,CAAW,IAAI,GAAJ,GAAU,CAArB,EAAwB,GAAxB;AAHU,GAApB;AAKD,CAdD;;AAgBA;AACA;AACA,SAAS,aAAT,CAAuB,QAAvB,EAAiC,IAAjC,EAAuC,IAAvC;;AAEA;AACA,SAAS,aAAT,GAAyB,UAAS,IAAT,EAAe;AACtC;AACA,MAAI,aAAa,cAAc,QAAQ,aAAR,GAAwB,IAAxB,GAA+B,QAA7C,CAAjB;AACA;AACA,QAAM,IAAN,CAAW,CAAX,CAAa,MAAb,CAAoB,MAAM,IAAN,CAAW,CAAX,CAAa,gBAAjC,EAAmD,WAAW,MAA9D;AACA;AACA,SAAO,UAAP;AACD,CAPD;;AASA;AACA,SAAS,OAAT,GAAmB,UAAS,IAAT,EAAe,OAAf,EAAwB;AACzC,MAAI,CAAC,OAAL,EAAc;AAAE,cAAU,EAAV;AAAe;AAC/B;AACA,MAAI,aAAa,SAAS,aAAT,CAAuB,QAAQ,UAA/B,CAAjB;AACA;AACA,MAAI,OAAO,OAAO,MAAP,CAAc,QAAQ,IAAR,IAAgB,MAAM,MAAN,CAAa,IAA7B,IAAqC,EAAnD,CAAX;AACA;AACA;AACA,MAAI,EAAE,WAAW,IAAb,CAAJ,EAAwB;AAAE,SAAK,KAAL,GAAa,KAAb;AAAqB;AAC/C;AACA,MAAI,OAAO,IAAX;AACA,MAAI;AACF;AACA;AACA,WAAO,KAAK,OAAL,CAAa,WAAW,MAAxB,KAAmC,CAA1C,EAA6C;AAC3C,aAAO,MAAM,IAAN,CAAW,CAAX,CAAa,QAAb,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,IAArC,CAAP;AACA;AACA,UAAI,SAAS,IAAb,EAAmB;AAAE;AAAQ;AAC7B,aAAO,IAAP;AACD;AACF,GATD,CASE,OAAO,CAAP,EAAU;AACV;AACA;AACA;AACA,QAAI,OAAO,CAAP,MAAc,uCAAd,IAAyD,QAAQ,IAAR,CAAa,IAAb,CAA7D,EAAiF;AAC/E,YAAM,GAAN,CAAU,QAAV,CAAmB,wDACjB,mEADiB,GAEjB,4CAFF;AAGD;AACD;AACA,MAAE,OAAF,GAAY,oDAAoD,EAAE,OAAtD,GAAgE,IAA5E;AACA,UAAM,IAAN,CAAW,CAAX,EAAc,MAAM,IAAN,CAAW,IAAX,CAAgB,cAA9B;AACD;AACD;AACA,SAAO,MAAM,IAAN,CAAW,WAAX,CAAuB,IAAvB,CAAP;AACD,CAnCD","file":"template-compiled.js","sourcesContent":["'use strict';\n\nvar grunt = require('../grunt');\n\n// The module to be exported.\nvar template = module.exports = {};\n\n// External libs.\ntemplate.date = require('dateformat');\n\n// Format today's date.\ntemplate.today = function(format) {\n  return template.date(new Date(), format);\n};\n\n// Template delimiters.\nvar allDelimiters = {};\n\n// Initialize template delimiters.\ntemplate.addDelimiters = function(name, opener, closer) {\n  var delimiters = allDelimiters[name] = {};\n  // Used by grunt.\n  delimiters.opener = opener;\n  delimiters.closer = closer;\n  // Generate RegExp patterns dynamically.\n  var a = delimiters.opener.replace(/(.)/g, '\\\\$1');\n  var b = '([\\\\s\\\\S]+?)' + delimiters.closer.replace(/(.)/g, '\\\\$1');\n  // Used by Lo-Dash.\n  delimiters.lodash = {\n    evaluate: new RegExp(a + b, 'g'),\n    interpolate: new RegExp(a + '=' + b, 'g'),\n    escape: new RegExp(a + '-' + b, 'g')\n  };\n};\n\n// The underscore default template syntax should be a pretty sane default for\n// the config system.\ntemplate.addDelimiters('config', '<%', '%>');\n\n// Set Lo-Dash template delimiters.\ntemplate.setDelimiters = function(name) {\n  // Get the appropriate delimiters.\n  var delimiters = allDelimiters[name in allDelimiters ? name : 'config'];\n  // Tell Lo-Dash which delimiters to use.\n  grunt.util._.extend(grunt.util._.templateSettings, delimiters.lodash);\n  // Return the delimiters.\n  return delimiters;\n};\n\n// Process template + data with Lo-Dash.\ntemplate.process = function(tmpl, options) {\n  if (!options) { options = {}; }\n  // Set delimiters, and get a opening match character.\n  var delimiters = template.setDelimiters(options.delimiters);\n  // Clone data, initializing to config data or empty object if omitted.\n  var data = Object.create(options.data || grunt.config.data || {});\n  // Expose grunt so that grunt utilities can be accessed, but only if it\n  // doesn't conflict with an existing .grunt property.\n  if (!('grunt' in data)) { data.grunt = grunt; }\n  // Keep track of last change.\n  var last = tmpl;\n  try {\n    // As long as tmpl contains template tags, render it and get the result,\n    // otherwise just use the template string.\n    while (tmpl.indexOf(delimiters.opener) >= 0) {\n      tmpl = grunt.util._.template(tmpl, options)(data);\n      // Abort if template didn't change - nothing left to process!\n      if (tmpl === last) { break; }\n      last = tmpl;\n    }\n  } catch (e) {\n    // In upgrading to Lo-Dash (or Underscore.js 1.3.3), \\n and \\r in template\n    // tags now causes an exception to be thrown. Warn the user why this is\n    // happening. https://github.com/documentcloud/underscore/issues/553\n    if (String(e) === 'SyntaxError: Unexpected token ILLEGAL' && /\\n|\\r/.test(tmpl)) {\n      grunt.log.errorlns('A special character was detected in this template. ' +\n        'Inside template tags, the \\\\n and \\\\r special characters must be ' +\n        'escaped as \\\\\\\\n and \\\\\\\\r. (grunt 0.4.0+)');\n    }\n    // Slightly better error message.\n    e.message = 'An error occurred while processing a template (' + e.message + ').';\n    grunt.warn(e, grunt.fail.code.TEMPLATE_ERROR);\n  }\n  // Normalize linefeeds and return.\n  return grunt.util.normalizelf(tmpl);\n};\n"]}