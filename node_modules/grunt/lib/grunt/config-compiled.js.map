{"version":3,"sources":["config.js"],"names":[],"mappings":"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","file":"config-compiled.js","sourcesContent":["'use strict';\n\nvar grunt = require('../grunt');\n\n// Get/set config data. If value was passed, set. Otherwise, get.\nvar config = module.exports = function(prop, value) {\n  if (arguments.length === 2) {\n    // Two arguments were passed, set the property's value.\n    return config.set(prop, value);\n  } else {\n    // Get the property's value (or the entire data object).\n    return config.get(prop);\n  }\n};\n\n// The actual config data.\nconfig.data = {};\n\n// Escape any . in name with \\. so dot-based namespacing works properly.\nconfig.escape = function(str) {\n  return str.replace(/\\./g, '\\\\.');\n};\n\n// Return prop as a string.\nconfig.getPropString = function(prop) {\n  return Array.isArray(prop) ? prop.map(config.escape).join('.') : prop;\n};\n\n// Get raw, unprocessed config data.\nconfig.getRaw = function(prop) {\n  if (prop) {\n    // Prop was passed, get that specific property's value.\n    return grunt.util.namespace.get(config.data, config.getPropString(prop));\n  } else {\n    // No prop was passed, return the entire config.data object.\n    return config.data;\n  }\n};\n\n// Match '<%= FOO %>' where FOO is a propString, eg. foo or foo.bar but not\n// a method call like foo() or foo.bar().\nvar propStringTmplRe = /^<%=\\s*([a-z0-9_$]+(?:\\.[a-z0-9_$]+)*)\\s*%>$/i;\n\n// Get config data, recursively processing templates.\nconfig.get = function(prop) {\n  return config.process(config.getRaw(prop));\n};\n\n// Expand a config value recursively. Used for post-processing raw values\n// already retrieved from the config.\nconfig.process = function(raw) {\n  return grunt.util.recurse(raw, function(value) {\n    // If the value is not a string, return it.\n    if (typeof value !== 'string') { return value; }\n    // If possible, access the specified property via config.get, in case it\n    // doesn't refer to a string, but instead refers to an object or array.\n    var matches = value.match(propStringTmplRe);\n    var result;\n    if (matches) {\n      result = config.get(matches[1]);\n      // If the result retrieved from the config data wasn't null or undefined,\n      // return it.\n      if (result != null) { return result; }\n    }\n    // Process the string as a template.\n    return grunt.template.process(value, {data: config.data});\n  });\n};\n\n// Set config data.\nconfig.set = function(prop, value) {\n  return grunt.util.namespace.set(config.data, config.getPropString(prop), value);\n};\n\n// Deep merge config data.\nconfig.merge = function(obj) {\n  grunt.util._.merge(config.data, obj);\n  return config.data;\n};\n\n// Initialize config data.\nconfig.init = function(obj) {\n  grunt.verbose.write('Initializing config...').ok();\n  // Initialize and return data.\n  return (config.data = obj || {});\n};\n\n// Test to see if required config params have been defined. If not, throw an\n// exception (use this inside of a task).\nconfig.requires = function() {\n  var p = grunt.util.pluralize;\n  var props = grunt.util.toArray(arguments).map(config.getPropString);\n  var msg = 'Verifying propert' + p(props.length, 'y/ies') +\n    ' ' + grunt.log.wordlist(props) + ' exist' + p(props.length, 's') +\n    ' in config...';\n  grunt.verbose.write(msg);\n  var failProps = config.data && props.filter(function(prop) {\n    return config.get(prop) == null;\n  }).map(function(prop) {\n    return '\"' + prop + '\"';\n  });\n  if (config.data && failProps.length === 0) {\n    grunt.verbose.ok();\n    return true;\n  } else {\n    grunt.verbose.or.write(msg);\n    grunt.log.error().error('Unable to process task.');\n    if (!config.data) {\n      throw grunt.util.error('Unable to load config.');\n    } else {\n      throw grunt.util.error('Required config propert' +\n        p(failProps.length, 'y/ies') + ' ' + failProps.join(', ') + ' missing.');\n    }\n  }\n};\n"]}