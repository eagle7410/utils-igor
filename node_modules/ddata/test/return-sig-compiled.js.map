{"version":3,"sources":["return-sig.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,KAAR,CAAZ;;AAEA,SAAS,WAAT,CAAsB,IAAtB,EAA4B;AAC1B,SAAO,EAAE,IAAI,UAAU,OAAV,EAAmB;AAC9B,WAAK,OAAL;AACD,KAFM,EAAP;AAGD;;AAED,KAAK,4BAAL,EAAmC,UAAU,CAAV,EAAa;AAC9C,MAAI,aAAa,EAAE,WAAW,CAC1B,EAAE,QAAQ,EAAE,SAAS,CAAE,QAAF,CAAX,EAAV,EAAqC,eAAe,QAApD,EAD0B,EAE1B,EAAE,QAAQ,EAAE,SAAS,CAAE,QAAF,EAAY,UAAZ,CAAX,EAAV,EAAiD,eAAe,QAAhE,EAF0B,CAAb,EAAjB;;AAKA,MAAI,UAAU,YAAY,UAAU,OAAV,EAAmB;AAC3C,MAAE,SAAF,CAAY,OAAZ,EAAqB,EAAE,QAAQ,GAAV,EAAe,OAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,UAArB,CAAtB,EAArB;AACA,MAAE,GAAF;AACD,GAHa,CAAd;AAIA,QAAM,UAAN,CAAiB,IAAjB,CAAsB,UAAtB,EAAkC,OAAlC;AACD,CAXD;;AAaA,KAAK,sBAAL,EAA6B,UAAU,CAAV,EAAa;AACxC,MAAI,aAAa,EAAE,QAAQ,EAAE,SAAS,CAAE,QAAF,CAAX,EAAV,EAAjB;;AAEA,MAAI,UAAU,YAAY,UAAU,OAAV,EAAmB;AAC3C,MAAE,SAAF,CAAY,OAAZ,EAAqB,EAAE,QAAQ,GAAV,EAAe,OAAO,CAAC,QAAD,CAAtB,EAArB;AACA,MAAE,GAAF;AACD,GAHa,CAAd;AAIA,QAAM,UAAN,CAAiB,IAAjB,CAAsB,UAAtB,EAAkC,OAAlC;AACD,CARD;;AAUA,KAAK,qBAAL,EAA4B,UAAU,CAAV,EAAa;AACvC,MAAI,aAAa;AACf,eAAW,CAAE,EAAE,eAAe,0CAAjB,EAAF;AADI,GAAjB;AAGA,MAAI,UAAU,YAAY,UAAU,OAAV,EAAmB;AAC3C,MAAE,SAAF,CAAY,OAAZ,EAAqB,EAAE,QAAQ,IAAV,EAAgB,OAAO,IAAvB,EAArB;AACA,MAAE,GAAF;AACD,GAHa,CAAd;AAIA,QAAM,UAAN,CAAiB,IAAjB,CAAsB,UAAtB,EAAkC,OAAlC;AACD,CATD","file":"return-sig-compiled.js","sourcesContent":["'use strict'\nvar test = require('tape')\nvar ddata = require('../')\n\nfunction makeOptions (done) {\n  return { fn: function (context) {\n    done(context)\n  }}\n}\n\ntest('multiple returns specified', function (t) {\n  var identifier = { 'returns': [\n      { 'type': { 'names': [ 'string' ] }, 'description': 'desc 1' },\n      { 'type': { 'names': [ 'object', 'function' ] }, 'description': 'desc 2' }\n  ]}\n\n  var options = makeOptions(function (context) {\n    t.deepEqual(context, { symbol: 'â‡’', types: ['string', 'object', 'function'] })\n    t.end()\n  })\n  ddata.returnSig2.call(identifier, options)\n})\n\ntest('no returns, one type', function (t) {\n  var identifier = { 'type': { 'names': [ 'string' ] } }\n\n  var options = makeOptions(function (context) {\n    t.deepEqual(context, { symbol: ':', types: ['string'] })\n    t.end()\n  })\n  ddata.returnSig2.call(identifier, options)\n})\n\ntest('return with no type', function (t) {\n  var identifier = {\n    'returns': [ { 'description': 'A string representation of the argument.' } ]\n  }\n  var options = makeOptions(function (context) {\n    t.deepEqual(context, { symbol: null, types: null })\n    t.end()\n  })\n  ddata.returnSig2.call(identifier, options)\n})\n"]}