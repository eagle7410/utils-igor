{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,WAAW,QAAQ,QAAR,EAAkB,QAAjC;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,SAAS,QAAQ,UAAR,CAAb;;AAEA,SAAS,MAAT,CAAiB,GAAjB,EAAsB,OAAtB,EAA+B;AAC7B,SAAO,WAAP,CAAmB,OAAO,GAA1B,EAA+B,QAA/B,EAAyC,yDAAyD,OAAO,GAAzG;AACA,MAAI,uBAAuB,EAAE,YAAY,IAAd,EAA3B;AACA,MAAI,cAAc,EAAE,aAAa,OAAf,EAAwB,YAAY,SAApC,EAA+C,QAAQ,SAAvD,EAAlB;AACA,YAAU,OAAO,WAAP,EAAoB,OAApB,EAA6B,oBAA7B,CAAV;;AAEA,WAAS,IAAT,CAAc,IAAd,EAAoB,OAApB;AACA,OAAK,IAAL,GAAY,KAAK,OAAL,CAAa,GAAb,CAAZ;AACA,OAAK,KAAL,GAAa,CAAC,KAAK,IAAN,CAAb;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,EAAL,GAAU,QAAQ,EAAR,IAAc,EAAxB,CAV6B,CAUF;AAC5B;AACD,KAAK,QAAL,CAAc,MAAd,EAAsB,QAAtB;;AAEA,OAAO,SAAP,CAAiB,KAAjB,GAAyB,YAAY;AACnC,MAAI,KAAK,KAAL,CAAW,MAAX,KAAsB,CAA1B,EAA6B,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AAC7B,MAAI,OAAO,IAAX;AACA,MAAI,WAAW,KAAK,KAAL,CAAW,KAAK,OAAL,CAAa,WAAxB,GAAf;;AAEA,OAAK,EAAL,CAAQ,KAAR,CAAc,QAAd,EAAwB,UAAU,GAAV,EAAe,KAAf,EAAsB;AAC5C,QAAI,OAAO,EAAE,MAAM,QAAR,EAAkB,OAAO,KAAzB,EAAX;AACA,QAAI,GAAJ,EAAS,OAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB,EAAwB,IAAxB,CAAP;AACT,QAAI,CAAC,MAAM,WAAN,EAAL,EAA0B,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP;;AAE1B,SAAK,EAAL,CAAQ,OAAR,CAAgB,QAAhB,EAA0B,UAAU,GAAV,EAAe,SAAf,EAA0B;AAClD,UAAI,GAAJ,EAAS;AACP,aAAK,IAAL,CAAU,IAAV;AACA,eAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB,EAAwB,IAAxB,CAAP;AACD;;AAED,kBAAY,UAAU,GAAV,CAAc,UAAU,IAAV,EAAgB;AAAE,eAAO,KAAK,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAP;AAAkC,OAAlE,CAAZ;AACA,UAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB,YAAY,UAAU,MAAV,CAAiB,KAAK,OAAL,CAAa,MAA9B,CAAZ;AACzB,UAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B,UAAU,IAAV,CAAe,KAAK,OAAL,CAAa,UAA5B;AAC7B,gBAAU,OAAV,CAAkB,UAAU,EAAV,EAAc;AAAE,aAAK,KAAL,CAAW,IAAX,CAAgB,EAAhB;AAAqB,OAAvD;;AAEA,WAAK,IAAL,CAAU,IAAV;AACD,KAZD;AAaD,GAlBD;AAmBD,CAxBD;;AA0BA,SAAS,IAAT,CAAe,IAAf,EAAqB,OAArB,EAA8B;AAC5B,SAAO,IAAI,MAAJ,CAAW,IAAX,EAAiB,OAAjB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,IAAjB","file":"index-compiled.js","sourcesContent":["var assert = require('assert')\nvar fs = require('fs')\nvar path = require('path')\nvar Readable = require('stream').Readable\nvar util = require('util')\nvar assign = require('./assign')\n\nfunction Walker (dir, options) {\n  assert.strictEqual(typeof dir, 'string', '`dir` parameter should be of type string. Got type: ' + typeof dir)\n  var defaultStreamOptions = { objectMode: true }\n  var defaultOpts = { queueMethod: 'shift', pathSorter: undefined, filter: undefined }\n  options = assign(defaultOpts, options, defaultStreamOptions)\n\n  Readable.call(this, options)\n  this.root = path.resolve(dir)\n  this.paths = [this.root]\n  this.options = options\n  this.fs = options.fs || fs // mock-fs\n}\nutil.inherits(Walker, Readable)\n\nWalker.prototype._read = function () {\n  if (this.paths.length === 0) return this.push(null)\n  var self = this\n  var pathItem = this.paths[this.options.queueMethod]()\n\n  self.fs.lstat(pathItem, function (err, stats) {\n    var item = { path: pathItem, stats: stats }\n    if (err) return self.emit('error', err, item)\n    if (!stats.isDirectory()) return self.push(item)\n\n    self.fs.readdir(pathItem, function (err, pathItems) {\n      if (err) {\n        self.push(item)\n        return self.emit('error', err, item)\n      }\n\n      pathItems = pathItems.map(function (part) { return path.join(pathItem, part) })\n      if (self.options.filter) pathItems = pathItems.filter(self.options.filter)\n      if (self.options.pathSorter) pathItems.sort(self.options.pathSorter)\n      pathItems.forEach(function (pi) { self.paths.push(pi) })\n\n      self.push(item)\n    })\n  })\n}\n\nfunction walk (root, options) {\n  return new Walker(root, options)\n}\n\nmodule.exports = walk\n"]}