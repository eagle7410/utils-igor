{"version":3,"sources":["reflect.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;AAGA,QAAQ,OAAR,GAAkB,OAAlB;;AAEA,IAAI,iBAAiB,QAAQ,0BAAR,CAArB;;AAEA,IAAI,kBAAkB,uBAAuB,cAAvB,CAAtB;;AAEA,IAAI,QAAQ,QAAQ,aAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AACjB,WAAO,CAAC,GAAG,gBAAgB,OAApB,EAA6B,SAAS,SAAT,CAAmB,IAAnB,EAAyB,eAAzB,EAA0C;AAC1E,aAAK,IAAL,CAAU,CAAC,GAAG,OAAO,OAAX,EAAoB,SAAS,QAAT,CAAkB,GAAlB,EAAuB,MAAvB,EAA+B;AACzD,gBAAI,GAAJ,EAAS;AACL,gCAAgB,IAAhB,EAAsB;AAClB,2BAAO;AADW,iBAAtB;AAGH,aAJD,MAIO;AACH,oBAAI,QAAQ,IAAZ;AACA,oBAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACrB,4BAAQ,OAAO,CAAP,CAAR;AACH,iBAFD,MAEO,IAAI,OAAO,MAAP,GAAgB,CAApB,EAAuB;AAC1B,4BAAQ,MAAR;AACH;AACD,gCAAgB,IAAhB,EAAsB;AAClB,2BAAO;AADW,iBAAtB;AAGH;AACJ,SAhBS,CAAV;;AAkBA,eAAO,GAAG,KAAH,CAAS,IAAT,EAAe,IAAf,CAAP;AACH,KApBM,CAAP;AAqBH;AACD,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"reflect-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reflect;\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _rest = require('lodash/rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wraps the function in another function that always returns data even when it\n * errors.\n *\n * The object returned has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    return (0, _initialParams2.default)(function reflectOn(args, reflectCallback) {\n        args.push((0, _rest2.default)(function callback(err, cbArgs) {\n            if (err) {\n                reflectCallback(null, {\n                    error: err\n                });\n            } else {\n                var value = null;\n                if (cbArgs.length === 1) {\n                    value = cbArgs[0];\n                } else if (cbArgs.length > 1) {\n                    value = cbArgs;\n                }\n                reflectCallback(null, {\n                    value: value\n                });\n            }\n        }));\n\n        return fn.apply(this, args);\n    });\n}\nmodule.exports = exports['default'];"]}