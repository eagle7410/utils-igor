{"version":3,"sources":["dir.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AAC3C,SAAO;AADoC,CAA7C;;AAIA,IAAI,eAAe,QAAQ,wBAAR,CAAnB;;AAEA,IAAI,gBAAgB,uBAAuB,YAAvB,CAApB;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,SAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,QAAQ,OAAR,GAAkB,CAAC,GAAG,cAAc,OAAlB,EAA2B,KAA3B,CAAlB;AACA,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"dir-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _consoleFunc = require('./internal/consoleFunc');\n\nvar _consoleFunc2 = _interopRequireDefault(_consoleFunc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Logs the result of an `async` function to the `console` using `console.dir`\n * to display the properties of the resulting object. Only works in Node.js or\n * in browsers that support `console.dir` and `console.error` (such as FF and\n * Chrome). If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nexports.default = (0, _consoleFunc2.default)('dir');\nmodule.exports = exports['default'];"]}