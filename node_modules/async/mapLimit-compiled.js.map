{"version":3,"sources":["mapLimit.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AAC3C,SAAO;AADoC,CAA7C;;AAIA,IAAI,mBAAmB,QAAQ,4BAAR,CAAvB;;AAEA,IAAI,oBAAoB,uBAAuB,gBAAvB,CAAxB;;AAEA,IAAI,OAAO,QAAQ,gBAAR,CAAX;;AAEA,IAAI,QAAQ,uBAAuB,IAAvB,CAAZ;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,SAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;AAmBA,QAAQ,OAAR,GAAkB,CAAC,GAAG,kBAAkB,OAAtB,EAA+B,MAAM,OAArC,CAAlB;AACA,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"mapLimit-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _doParallelLimit = require('./internal/doParallelLimit');\n\nvar _doParallelLimit2 = _interopRequireDefault(_doParallelLimit);\n\nvar _map = require('./internal/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a transformed\n * item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nexports.default = (0, _doParallelLimit2.default)(_map2.default);\nmodule.exports = exports['default'];"]}