{"version":3,"sources":["priorityQueue.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;;AAIA,QAAQ,OAAR,GAAkB,UAAU,MAAV,EAAkB,WAAlB,EAA+B;AAC7C;AACA,QAAI,IAAI,CAAC,GAAG,QAAQ,OAAZ,EAAqB,MAArB,EAA6B,WAA7B,CAAR;;AAEA;AACA,MAAE,IAAF,GAAS,UAAU,IAAV,EAAgB,QAAhB,EAA0B,QAA1B,EAAoC;AACzC,YAAI,YAAY,IAAhB,EAAsB,WAAW,OAAO,OAAlB;AACtB,YAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAChC,kBAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACH;AACD,UAAE,OAAF,GAAY,IAAZ;AACA,YAAI,CAAC,CAAC,GAAG,UAAU,OAAd,EAAuB,IAAvB,CAAL,EAAmC;AAC/B,mBAAO,CAAC,IAAD,CAAP;AACH;AACD,YAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB;AACA,mBAAO,CAAC,GAAG,eAAe,OAAnB,EAA4B,YAAY;AAC3C,kBAAE,KAAF;AACH,aAFM,CAAP;AAGH;;AAED,mBAAW,YAAY,CAAvB;AACA,YAAI,WAAW,EAAE,MAAF,CAAS,IAAxB;AACA,eAAO,YAAY,YAAY,SAAS,QAAxC,EAAkD;AAC9C,uBAAW,SAAS,IAApB;AACH;;AAED,SAAC,GAAG,YAAY,OAAhB,EAAyB,IAAzB,EAA+B,UAAU,IAAV,EAAgB;AAC3C,gBAAI,OAAO;AACP,sBAAM,IADC;AAEP,0BAAU,QAFH;AAGP,0BAAU;AAHH,aAAX;;AAMA,gBAAI,QAAJ,EAAc;AACV,kBAAE,MAAF,CAAS,YAAT,CAAsB,QAAtB,EAAgC,IAAhC;AACH,aAFD,MAEO;AACH,kBAAE,MAAF,CAAS,IAAT,CAAc,IAAd;AACH;AACJ,SAZD;AAaA,SAAC,GAAG,eAAe,OAAnB,EAA4B,EAAE,OAA9B;AACH,KApCD;;AAsCA;AACA,WAAO,EAAE,OAAT;;AAEA,WAAO,CAAP;AACH,CA/CD;;AAiDA,IAAI,aAAa,QAAQ,mBAAR,CAAjB;;AAEA,IAAI,cAAc,uBAAuB,UAAvB,CAAlB;;AAEA,IAAI,WAAW,QAAQ,gBAAR,CAAf;;AAEA,IAAI,YAAY,uBAAuB,QAAvB,CAAhB;;AAEA,IAAI,QAAQ,QAAQ,aAAR,CAAZ;;AAEA,IAAI,SAAS,uBAAuB,KAAvB,CAAb;;AAEA,IAAI,gBAAgB,QAAQ,gBAAR,CAApB;;AAEA,IAAI,iBAAiB,uBAAuB,aAAvB,CAArB;;AAEA,IAAI,SAAS,QAAQ,SAAR,CAAb;;AAEA,IAAI,UAAU,uBAAuB,MAAvB,CAAd;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB;;AAEA","file":"priorityQueue-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = (0, _queue2.default)(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority, callback) {\n        if (callback == null) callback = _noop2.default;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!(0, _isArray2.default)(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return (0, _setImmediate2.default)(function () {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        (0, _arrayEach2.default)(data, function (task) {\n            var item = {\n                data: task,\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        });\n        (0, _setImmediate2.default)(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\nvar _arrayEach = require('lodash/_arrayEach');\n\nvar _arrayEach2 = _interopRequireDefault(_arrayEach);\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _setImmediate = require('./setImmediate');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _queue = require('./queue');\n\nvar _queue2 = _interopRequireDefault(_queue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing a queued\n * task, which must call its `callback(err)` argument when finished, with an\n * optional `error` as an argument.  If you want to handle errors from an\n * individual task, pass a callback to `q.push()`. Invoked with\n * (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */"]}