{"version":3,"sources":["reflectAll.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AACzC,WAAO;AADkC,CAA7C;AAGA,QAAQ,OAAR,GAAkB,UAAlB;;AAEA,IAAI,WAAW,QAAQ,WAAR,CAAf;;AAEA,IAAI,YAAY,uBAAuB,QAAvB,CAAhB;;AAEA,IAAI,WAAW,QAAQ,gBAAR,CAAf;;AAEA,IAAI,YAAY,uBAAuB,QAAvB,CAAhB;;AAEA,IAAI,aAAa,QAAQ,kBAAR,CAAjB;;AAEA,IAAI,aAAa,uBAAuB,UAAvB,CAAjB;;AAEA,IAAI,cAAc,QAAQ,oBAAR,CAAlB;;AAEA,IAAI,eAAe,uBAAuB,WAAvB,CAAnB;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAAE,WAAO,OAAO,IAAI,UAAX,GAAwB,GAAxB,GAA8B,EAAE,SAAS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACvB,QAAI,OAAJ;AACA,QAAI,CAAC,GAAG,UAAU,OAAd,EAAuB,KAAvB,CAAJ,EAAmC;AAC/B,kBAAU,CAAC,GAAG,WAAW,OAAf,EAAwB,KAAxB,EAA+B,UAAU,OAAzC,CAAV;AACH,KAFD,MAEO;AACH,kBAAU,EAAV;AACA,SAAC,GAAG,aAAa,OAAjB,EAA0B,KAA1B,EAAiC,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AAClD,oBAAQ,GAAR,IAAe,UAAU,OAAV,CAAkB,IAAlB,CAAuB,IAAvB,EAA6B,IAA7B,CAAf;AACH,SAFD;AAGH;AACD,WAAO,OAAP;AACH;AACD,OAAO,OAAP,GAAiB,QAAQ,SAAR,CAAjB","file":"reflectAll-compiled.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reflectAll;\n\nvar _reflect = require('./reflect');\n\nvar _reflect2 = _interopRequireDefault(_reflect);\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _arrayMap2 = require('lodash/_arrayMap');\n\nvar _arrayMap3 = _interopRequireDefault(_arrayMap2);\n\nvar _baseForOwn = require('lodash/_baseForOwn');\n\nvar _baseForOwn2 = _interopRequireDefault(_baseForOwn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A helper function that wraps an array or an object of functions with reflect.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array} tasks - The array of functions to wrap in `async.reflect`.\n * @returns {Array} Returns an array of functions, each function wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if ((0, _isArray2.default)(tasks)) {\n        results = (0, _arrayMap3.default)(tasks, _reflect2.default);\n    } else {\n        results = {};\n        (0, _baseForOwn2.default)(tasks, function (task, key) {\n            results[key] = _reflect2.default.call(this, task);\n        });\n    }\n    return results;\n}\nmodule.exports = exports['default'];"]}