{"version":3,"sources":["_stringToPath.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,QAAQ,kBAAR,CAApB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;AACA,IAAI,eAAe,KAAnB;AAAA,IACI,aAAa,kGADjB;;AAGA;AACA,IAAI,eAAe,UAAnB;;AAEA;;;;;;;AAOA,IAAI,eAAe,cAAc,UAAS,MAAT,EAAiB;AAChD,WAAS,SAAS,MAAT,CAAT;;AAEA,MAAI,SAAS,EAAb;AACA,MAAI,aAAa,IAAb,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,WAAO,IAAP,CAAY,EAAZ;AACD;AACD,SAAO,OAAP,CAAe,UAAf,EAA2B,UAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AAChE,WAAO,IAAP,CAAY,QAAQ,OAAO,OAAP,CAAe,YAAf,EAA6B,IAA7B,CAAR,GAA8C,UAAU,KAApE;AACD,GAFD;AAGA,SAAO,MAAP;AACD,CAXkB,CAAnB;;AAaA,OAAO,OAAP,GAAiB,YAAjB","file":"_stringToPath-compiled.js","sourcesContent":["var memoizeCapped = require('./_memoizeCapped'),\n    toString = require('./toString');\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n"]}