{"version":3,"sources":["child.js"],"names":[],"mappings":"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","file":"child-compiled.js","sourcesContent":["var path = require('path');\nvar fs = require('fs');\nvar nodeunit = require('nodeunit');\n\nvar filepaths = fs.readdirSync('test').map(function(filename) {\n  return path.join('test', filename);\n});\n\nvar unfinished = {};\nvar currentModule;\nfunction sendMessage(message) {\n  process.stdout.write(JSON.stringify(message) + '\\n');\n}\n\n// If an exception is thrown, let the parent process know and exit.\nprocess.on('uncaughtException', function (e) {\n  sendMessage({error: [e.name, e.message, e.stack]});\n  process.exit();\n});\n\n// If Nodeunit explodes because a test was missing test.done(), handle it.\nvar unfinished = {};\nprocess.on('exit', function (e) {\n  var len = Object.keys(unfinished).length\n  if (len > 0) {\n    sendMessage({exit: ['UNFINISHED']});\n    // process.reallyExit(len);\n  } else {\n    sendMessage({exit: ['finished']});\n  }\n  // process.exit();\n});\n\nnodeunit.reporters.test = {\n  run: function(files, options, callback) {\n    // Nodeunit needs absolute paths.\n    var paths = files.map(function (filepath) {\n      return path.resolve(filepath);\n    });\n    nodeunit.runFiles(paths, {\n      // No idea.\n      testspec: undefined,\n      // Executed when the first test in a file is run. If no tests exist in\n      // the file, this doesn't execute.\n      moduleStart: function(name) {\n        // Keep track of this so that moduleDone output can be suppressed in\n        // cases where a test file contains no tests.\n        currentModule = name;\n        // Send back to the parent process.\n        sendMessage({moduleStart: [name.toString()]});\n      },\n      // Executed after a file is done being processed. This executes whether\n      // tests exist in the file or not.\n      moduleDone: function(name) {\n        // Abort if no tests actually ran.\n        if (name !== currentModule) { return; }\n        // Send back to the parent process.\n        sendMessage({moduleDone: [name.toString()]});\n      },\n      // Executed before each test is run.\n      testStart: function(name) {\n        // Keep track of the current test, in case test.done() was omitted\n        // and Nodeunit explodes.\n        unfinished[name] = name;\n        // Send back to the parent process.\n        sendMessage({testStart: [name.toString()]});\n      },\n      // Executed after each test and all its assertions are run.\n      testDone: function(name, assertions) {\n        delete unfinished[name];\n        // Send back to the parent process.\n        sendMessage({testDone: [\n          name.toString(),\n          assertions.failures(),\n          assertions.map(function(assertion) {\n            var e = assertion.error;\n            if (e) {\n              assertion.error = {\n                name: e.name,\n                message: e.message,\n                stack: e.stack\n              };\n            }\n            return assertion;\n          })\n        ]});\n      },\n      // Executed when everything is all done.\n      done: function (assertions) {\n        // Send back to the parent process.\n        sendMessage({done: [\n          assertions.failures(),\n          assertions.duration,\n          assertions\n        ]});\n      }\n    });\n  }\n}\n\nnodeunit.reporters.test.run(filepaths, {});\n"]}