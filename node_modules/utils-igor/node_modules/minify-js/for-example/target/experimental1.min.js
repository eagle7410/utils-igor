 "TEST2"; let fs = require('fs'); class Frame { constructor () { this.active = 'constructor'; } _mess (mess) { let that = this; let c = that.constructor.name; let a = that.active; return { active : a, mess : `Class ${this.active}/${a}: ${mess}`, mess2 : `Class ${this.active}/${a}: ${mess}`, mess2 : 'ONE', mess2 : 'Double', class : c }; } warn (mess, that) { that = that || this; log.warn(that._mess(mess).mess); } } class MinifyFile extends Frame { constructor (opt, cb) { super(); let that = this; that._isStop = null; cb = utils.type.beFn(cb); that.validOptions(opt, (e) => { cb(e, that); }); } } exports.file = (cb) => new MinifyFile(opt, cb); exports.files =null; exports.dirs = null; 