{"version":3,"sources":["arr.js"],"names":[],"mappings":"AAAA;;;AAGA;;AAEA;;;;;AAIA,QAAQ,KAAR,GAAiB,GAAD,IAAS,MAAM,OAAN,CAAc,GAAd,IAAqB,GAArB,GAA2B,EAApD;;AAEA,IAAI,QAAQ,QAAQ,KAApB;;AAEA;;;;;;;;AAQA,QAAQ,UAAR,GAAqB,CAAC,CAAD,EAAI,CAAJ,KAAW,WAAW,CAAX,IAAgB,WAAW,CAAX,CAAhD;AACA;;;;;;AAMA,OAAO,OAAP,CAAe,KAAf,GAAuB,CAAC,IAAD,EAAO,IAAP,KAAgB,MAAM,IAAN,EAAY,MAAZ,CAAqB,GAAD,IAAS,MAAM,IAAN,EAAY,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA3D,CAAvC;;AAEA;;;;;;AAMA,QAAQ,IAAR,GAAgB,CAAC,IAAD,EAAO,IAAP,KAAgB,MAAM,OAAN,CAAc,IAAd,IAAsB,MAAM,IAAN,EAAY,MAAZ,CAAoB,CAAD,IAAO,KAAK,OAAL,CAAa,CAAb,MAAoB,CAAC,CAA/C,CAAtB,GAA2E,EAA3G;;AAEA;;;;AAIA,QAAQ,MAAR,GAAkB,GAAD,IAAS,MAAM,GAAN,EAAW,MAAX,CAAkB,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,KAAwB,KAAK,OAAL,CAAa,KAAb,MAAwB,KAAlE,CAA1B;;AAEA;;;;;;AAMA,QAAQ,KAAR,GAAgB,CAAC,GAAD,EAAM,KAAN,KAAgB,MAAM,GAAN,EAAW,MAAX,CAAmB,CAAD,IAAO,IAAI,CAAJ,MAAW,KAApC,CAAhC;;AAEA;;;;AAIA,QAAQ,GAAR,GAAe,CAAD,IAAQ,MAAM,OAAN,CAAc,CAAd,CAAD,GAAqB,EAAE,MAAF,CAAU,CAAC,EAAD,EAAK,EAAL,KAAY,CAAC,MAAM,EAAN,IAAY,CAAZ,GAAgB,OAAO,EAAP,CAAjB,KAA8B,MAAM,EAAN,IAAY,CAAZ,GAAgB,OAAO,EAAP,CAA9C,CAAtB,EAAiF,CAAjF,CAArB,GAA2G,CAAhI;;AAEA;;;;;AAKA,QAAQ,GAAR,GAAe,CAAD,IAAQ,CAAC,MAAM,OAAN,CAAc,CAAd,CAAD,IAAqB,CAAC,EAAE,MAAzB,GAAoC,CAApC,GAAwC,QAAQ,GAAR,CAAY,CAAZ,IAAiB,EAAE,MAAhF;;AAEA;;;;;AAKA,QAAQ,IAAR,GAAgB,GAAD,IAAS;AACvB,MAAI,IAAI,EAAR;AACA,QAAM,OAAO,EAAb;AACA,QAAM,MAAM,OAAN,CAAc,GAAd,IAAqB,GAArB,GAA2B,CAAC,GAAD,CAAjC;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAG,IAAI,MAAvB,EAA+B,EAAE,CAAjC,EAAoC;AACnC,QAAI,KAAK,IAAI,CAAJ,KAAU,EAAnB;;AAEA,SAAK,GAAG,IAAH,GAAU,WAAV,EAAL;;AAEA,QAAI,GAAG,OAAH,CAAW,KAAX,MAAsB,CAAC,CAA3B,EAA8B,KAAK,YAAY,EAAjB;;AAE9B,QAAI,gCAAgC,IAAhC,CAAqC,EAArC,CAAJ,EAA8C,EAAE,IAAF,CAAO,EAAP;AAC9C;;AAED,SAAO,CAAP;AACA,CAhBD","file":"arr-compiled.js","sourcesContent":["/**\n * Created by igor on 30.05.16.\n */\n\"use strict\";\n\n/**\n * Check parametr be array. if not return empty array\n * @param {Mixed} arr\n */\nexports.check = (arr) => Array.isArray(arr) ? arr : [];\n\nlet check = exports.check;\n\n/**\n * By default the sort method sorts elements alphabetically.\n * To sort numerically just add a new method which handles numeric sorts\n * e.g. [11, 1, 2].sort(utils.sortNumber);\n * @param a\n * @param b\n * @returns {number}\n */\nexports.sortNumber = (a, b)  => parseFloat(a) - parseFloat(b);\n/**\n *  Return share part of the array\n * @param arr1\n * @param arr2\n * @returns {Array}\n */\nmodule.exports.share = (arr1, arr2) => check(arr1).filter( (val) => check(arr2).indexOf(val) !== -1 );\n\n/**\n * Return different part of the array\n * @param\t{Array} arr1\n * @param\t{Array} arr2\n * @return {Array}\n */\nexports.diff =  (arr1, arr2) => Array.isArray(arr2) ? check(arr1).filter((i) => arr2.indexOf(i) === -1 ) : [] ;\n\n/**\n * Clear repeat values\n * @param {Array} arr\n */\nexports.unique = (arr) => check(arr).filter((value, index, self) => self.indexOf(value) === index);\n\n/**\n * Delete all elements whith specified value\n * @param {Array} arr массив для очистки\n * @param {Mixed} value значение\n * @constructor\n */\nexports.mvVal = (arr, value) => check(arr).filter((i) => arr[i] !== value);\n\n/**\n * Sum of array elements\n * @return {Number}\n */\nexports.sum = (a) => (Array.isArray(a)) ? a.reduce( (pv, cv) => (isNaN(pv) ? 0 : Number(pv))+(isNaN(cv) ? 0 : Number(cv)), 0) : 0;\n\n/**\n * Return average elements array\n * @param a\n * @returns {number}\n */\nexports.avg = (a) => (!Array.isArray(a) || !a.length ) ? 0 : exports.sum(a) / a.length;\n\n/**\n * Return array. When element is url collect from specified array\n * @param arr\n * @returns {Array}\n */\nexports.urls = (arr) => {\n\tlet r = [];\n\tarr = arr || [];\n\tarr = Array.isArray(arr) ? arr : [arr];\n\n\tfor (let i = 0; i< arr.length; ++i) {\n\t\tlet el = arr[i] || '';\n\n\t\tel = el.trim().toLowerCase();\n\n\t\tif (el.indexOf('://') === -1) el = 'http://' + el;\n\n\t\tif (/^htt(p|ps)\\:\\/\\/(.*)+\\.(.*)+$/.test(el)) r.push(el);\n\t}\n\n\treturn r;\n};\n\n"]}