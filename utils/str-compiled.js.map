{"version":3,"sources":["str.js"],"names":[],"mappings":"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","file":"str-compiled.js","sourcesContent":["/**\n * Created by igor on 30.05.16.\n */\n\"use strict\";\n\nconst base = 'base64';\nlet crypto\t= require('crypto');\n\n/**\n *Return string encode/decode in base64\n * @param str\n * @param decode {boolean}\n * @returns {string}\n */\nexports.base64 = (str , decode) => !(decode || false)\n\t\t? new Buffer(str).toString(base)\n\t\t: new Buffer(str,base).toString('utf8');\n\n/**\n * Return salt\n * @return {String} salt\n */\nexports.salt = (len) => Math.random().toString(36).substring(2, (len || 5) + 2);\n\n/**\n * Return string hash\n * @param str {String}\n * @param salt {String}\n * @param secret {String}\n * @param method {String} md5, sha512, sha256\n * @returns {*}\n */\nexports.hash = (str, salt, method , secret) => {\n\tmethod = method || 'sha512';\n\tsecret = secret || 'IgorStcherbina';\n\n\tvar sha = crypto.createHmac(method, secret);\n\n\tsha.update(String(str), 'utf8');\n\n\tif (salt) {\n\t\tsha.update(salt);\n\t}\n\n\treturn sha.digest('hex');\n};\n\n/**\n * Return string, fist char in upper case.\n * @param s\n * @returns {string}\n */\nexports.up1stChar  = (s) => s.substring(0, 1).toUpperCase() + s.substring(1);\n\n/**\n * Escapes special characters for RegExp\n * @param {String}text\n */\nexports.regexpEscape = (text) => text.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');\n\n/**\n * Replace all find word to replace word\n * @param {String}str\n * @param {String}find\n * @param {String}replace\n */\nexports.replaceAll = (str, find, replace) => str.replace(new RegExp(exports.regexpEscape(find), 'g'), replace);\n\n/**\n * Escapes special characters for html and trim unnecessary\n * @param {String}str\n * @param {Number}maxLength\n * @returns {*}\n */\nexports.htmlEscape = (str, maxLength) => {\n\n\tif (str && str.length) {\n\t\tstr = exports.replaceAll(exports.replaceAll(str, '<', '&lt;'), '>', '&gt;');\n\n\t\tif (maxLength)\n\t\t\tstr = str.substr(0, maxLength);\n\n\t}\n\n\treturn str;\n};\n\n/**\n * Replace spaces to only one space\n * @param  {String} str string\n * @return {String} Output string\n */\nexports.oneSpace = (str) => str.replace(/\\s\\s+/g, ' ').trim();\n\n/**\n * Replace all spacial symbols to space\n * @param  {String} str string\n * @return {String} Output string\n */\nexports.removeSpecSymbols = (str) =>  exports.removeSpaces(str.replace(/[&\\/\\\\#,+()$~%.`'\":*?!<>{}\\[\\]]/g, ' '));\n\n/**\n * It generates key specified length. Used accept symbols\n * @param n\n * @returns {string}\n */\nexports.makeKey = (n, accept) => {\n\tn = n || 30;\n\taccept = accept || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n\tlet t = '';\n\n\tfor (let i = 0; i < n; i++)\n\t\tt += accept.charAt(Math.floor(Math.random() * accept.length));\n\n\treturn t;\n\n};\n\n/**\n * Decoding URI by all methods\n * @param {String} str\n * @returns {String}\n */\nexports.decodeURIUniversal = (str) => {\n\n\ttry {\n\t\tstr = decodeURIComponent(str);\n\t} catch (err) {\n\t\ttry {\n\t\t\tstr = decodeURI(str);\n\t\t} catch (err) {\n\t\t\tstr = str || '';\n\t\t}\n\t}\n\n\treturn str;\n\n};\n\n/**\n * Return value after convert string boolean to boolean.\n * if vl === 'true' then vl = true. Other vl = false\n * @param vl\n * @returns {Boolean}\n */\nexports.boolString = (vl) => vl === 'true' ? true : false ;\n"]}