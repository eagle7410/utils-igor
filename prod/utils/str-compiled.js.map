{"version":3,"sources":["str.js"],"names":[],"mappings":"AAAA;AAAa,MAAM,OAAO,QAAb,CAAsB,QAAQ,MAAR,GAAiB,CAAC,GAAD,EAAO,MAAP,KAAkB,EAAE,UAAU,KAAZ,IAAoB,IAAI,MAAJ,CAAW,GAAX,EAAgB,QAAhB,CAAyB,IAAzB,CAApB,GAAoD,IAAI,MAAJ,CAAW,GAAX,EAAe,IAAf,EAAqB,QAArB,CAA8B,MAA9B,CAAvF,CAA6H,QAAQ,IAAR,GAAgB,GAAD,IAAS,KAAK,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,SAA3B,CAAqC,CAArC,EAAwC,CAAC,OAAO,CAAR,IAAa,CAArD,CAAxB,CAAgF,QAAQ,IAAR,GAAe,CAAC,GAAD,EAAM,IAAN,EAAY,MAAZ,EAAqB,MAArB,KAAgC;AAAC,MAAI,MAAM,QAAQ,QAAR,EAAkB,UAAlB,CAA8B,UAAU,QAAxC,EAAoD,UAAU,gBAA9D,EAAiF,MAAjF,CAAwF,OAAO,GAAP,CAAxF,EAAqG,MAArG,CAAV,CAAuH,OAAO,CAAC,OAAO,IAAI,MAAJ,CAAW,IAAX,CAAP,GAA0B,GAA3B,EAAgC,MAAhC,CAAuC,KAAvC,CAAP;AAAsD,CAA7N,CAA8N,QAAQ,SAAR,GAAqB,CAAD,IAAO,EAAE,SAAF,CAAY,CAAZ,EAAe,CAAf,EAAkB,WAAlB,KAAkC,EAAE,SAAF,CAAY,CAAZ,CAA7D,CAA4E,QAAQ,YAAR,GAAwB,IAAD,IAAU,KAAK,OAAL,CAAa,wBAAb,EAAuC,MAAvC,CAAjC,CAAgF,QAAQ,WAAR,GAAsB,CAAC,GAAD,EAAM,IAAN,EAAY,OAAZ,KAAwB,IAAI,OAAJ,CAAY,IAAI,MAAJ,CAAW,QAAQ,YAAR,CAAqB,IAArB,CAAX,EAAuC,GAAvC,CAAZ,EAAyD,OAAzD,CAA9C,CAAgH,QAAQ,UAAR,GAAqB,CAAC,GAAD,EAAM,SAAN,KAAoB;AAAC,MAAI,OAAO,IAAI,MAAf,EAAuB;AAAC,UAAM,QAAQ,WAAR,CAAoB,QAAQ,WAAR,CAAoB,GAApB,EAAyB,GAAzB,EAA8B,MAA9B,CAApB,EAA2D,GAA3D,EAAgE,MAAhE,CAAN,CAA8E,IAAI,SAAJ,EAAc,MAAM,IAAI,MAAJ,CAAW,CAAX,EAAc,SAAd,CAAN;AAAgC,UAAO,GAAP;AAAY,CAA1M,CAA2M,QAAQ,QAAR,GAAoB,GAAD,IAAS,IAAI,OAAJ,CAAY,QAAZ,EAAsB,GAAtB,EAA2B,IAA3B,EAA5B,CAA8D,QAAQ,iBAAR,GAA6B,GAAD,IAAS,QAAQ,QAAR,CAAiB,IAAI,OAAJ,CAAY,kCAAZ,EAAgD,GAAhD,CAAjB,CAArC,CAA4G,QAAQ,OAAR,GAAkB,CAAC,CAAD,EAAI,MAAJ,KAAe;AAAC,MAAI,KAAK,EAAT,CAAY,SAAS,UAAU,gEAAnB,CAAoF,IAAI,IAAI,EAAR,CAAW,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA2B,KAAK,OAAO,MAAP,CAAc,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,OAAO,MAAlC,CAAd,CAAL,CAA8D,OAAO,CAAP;AAAU,CAAhP,CAAiP,QAAQ,kBAAR,GAA8B,GAAD,IAAS;AAAC,MAAI;AAAC,UAAM,mBAAmB,GAAnB,CAAN;AAA+B,GAApC,CAAqC,OAAO,GAAP,EAAY;AAAC,QAAI;AAAC,YAAM,UAAU,GAAV,CAAN;AAAsB,KAA3B,CAA4B,OAAO,GAAP,EAAY;AAAC,YAAM,OAAO,EAAb;AAAiB;AAAC,UAAO,GAAP;AAAY,CAAhK,CAAiK,QAAQ,UAAR,GAAsB,EAAD,IAAQ,OAAO,MAApC","file":"str-compiled.js","sourcesContent":["\"use strict\";const base = 'base64';exports.base64 = (str , decode) => !(decode || false)? new Buffer(str).toString(base): new Buffer(str,base).toString('utf8');exports.salt = (len) => Math.random().toString(36).substring(2, (len || 5) + 2);exports.hash = (str, salt, method , secret) => {let sha = require('crypto').createHmac((method || 'sha512'), (secret || 'IgorStcherbina')).update(String(str), 'utf8');return (salt ? sha.update(salt) : sha).digest('hex');};exports.up1stChar = (s) => s.substring(0, 1).toUpperCase() + s.substring(1);exports.regexpEscape = (text) => text.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');exports.fullReplace = (str, find, replace) => str.replace(new RegExp(exports.regexpEscape(find), 'g'), replace);exports.htmlEscape = (str, maxLength) => {if (str && str.length) {str = exports.fullReplace(exports.fullReplace(str, '<', '&lt;'), '>', '&gt;');if (maxLength)str = str.substr(0, maxLength);}return str;};exports.oneSpace = (str) => str.replace(/\\s\\s+/g, ' ').trim();exports.removeSpecSymbols = (str) => exports.oneSpace(str.replace(/[&\\/\\\\#,+()$~%.`'\":*?!<>{}\\[\\]]/g, ' '));exports.makeKey = (n, accept) => {n = n || 30;accept = accept || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';let t = '';for (let i = 0; i < n; i++)t += accept.charAt(Math.floor(Math.random() * accept.length));return t;};exports.decodeURIUniversal = (str) => {try {str = decodeURIComponent(str);} catch (err) {try {str = decodeURI(str);} catch (err) {str = str || '';}}return str;};exports.boolString = (vl) => vl === 'true';"]}